#!/bin/bash

QEMU_CONF_DIR='/etc/qemu-kvm/'

set -x

containsElement () {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

# For debugging
if [ "$1" = "bash" ]; then
  exec bash
fi

: ${KVM_BLK_OPTS:="\
  -drive file=/image/image.qcow2,if=none,id=drive-ide0-0-0,format=qcow2,cache=writethrough \
  -device ide-hd,bus=ide.0,unit=0,drive=drive-ide0-0-0,id=ide0-0-1,bootindex=1 \
  "}

: ${KVM_OPTS:="-smbios type=1,product=VSC \
  -machine rhel6.0.0,accel=kvm,usb=off \
  -nographic \
  -nodefaults \
  -no-acpi \
  -device virtio-balloon-pci,id=balloon0,bus=pci.0,addr=0x2 \
  -realtime mlock=off \
  -msg timestamp=on \
  -chardev pty,id=charserial0 \
  -device isa-serial,chardev=charserial0,id=serial0
  -serial telnet::4555,server,nowait
  "}

# Pass Docker command args to kvm
# KVM_ARGS="$@"

: ${KVM_ARGS:="-m 1024 -smp 4,sockets=4,cores=1,threads=1"}

bridge_ifaces=$(brctl show | tail -n +2 | sed '/^[\s\t]/d' | awk '{print $1}')
set -- $bridge_ifaces

# If BRIFACES is defined, attach them to the VM as tap devices
#
if ! [ -z "${BRIFACES}" ]; then
  i=0
  for iface in $BRIFACES; do
    if ! [ -z "${bridge_ifaces}" ]; then
      if ! $(containsElement $iface $bridge_ifaces); then
        brctl addbr $iface
        [[ $i -eq 0 ]] && brctl addif $iface eth0
        ip link set dev $iface up
      fi
    else
      brctl addbr $iface
      [[ $i -eq 0 ]] && brctl addif $iface eth0
    fi

    echo 'allow '$iface >> $QEMU_CONF_DIR/bridge.conf
    KVM_NET_OPTS="$KVM_NET_OPTS -netdev bridge,br=$iface,id=net$i -device virtio-net-pci,netdev=net$i"

    let i++
  done
fi

exec $LAUNCHER -enable-kvm $KVM_BLK_OPTS $KVM_OPTS $KVM_ARGS $KVM_NET_OPTS
