#!/bin/bash

# This entrypoint for KVM container configures and attaches network bridges to
# the VM and starts KVM with the selected options.

# See Dockerfile reference and README.md for further info.

# If no arguments, the VM will lauch with 4 cores and 1GB of memory

: ${LAUNCHER:='/usr/libexec/qemu-kvm'}
: ${QEMU_CONF_DIR:='/etc/qemu-kvm'}
: ${DNSMASQ_CONF_DIR:='/etc/dnsmasq.d'}

# set -x

containsElement () {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

# Generate random new MAC address
genMAC () {
  hexchars="0123456789ABCDEF"
  end=$( for i in {1..8} ; do echo -n ${hexchars:$(( $RANDOM % 16 )):1} ; done | sed -e 's/\(..\)/:\1/g' )
  echo "06:FE$end"
}

# atoi: Returns the integer representation of an IP arg, passed in ascii
# dotted-decimal notation (x.x.x.x)
atoi() {
  IP=$1
  IPnum=0
  for (( i=0 ; i<4 ; ++i ))
  do
    ((IPnum+=${IP%%.*}*$((256**$((3-${i}))))))
    IP=${IP#*.}
  done
  echo $IPnum
}

# itoa: returns the dotted-decimal ascii form of an IP arg passed in integer
# format
itoa() {
  echo -n $(($(($(($((${1}/256))/256))/256))%256)).
  echo -n $(($(($((${1}/256))/256))%256)).
  echo -n $(($((${1}/256))%256)).
  echo $((${1}%256))
}

cidr2mask() {
  local i mask=""
  local full_octets=$(($1/8))
  local partial_octet=$(($1%8))

  for ((i=0;i<4;i+=1)); do
    if [ $i -lt $full_octets ]; then
      mask+=255
    elif [ $i -eq $full_octets ]; then
      mask+=$((256 - 2**(8-$partial_octet)))
    else
      mask+=0
    fi
    test $i -lt 3 && mask+=.
  done

  echo $mask
}

# Generates and returns a new IP and MASK in a superset (inmediate wider range)
# of the given IP/MASK
# usage: getNonConflictingIP IP MASK
# returns NEWIP MASK
getNonConflictingIP () {
    local IP="$1"
    local CIDR="$2"

    let "newCIDR=$CIDR-1"

    local i=$(atoi $IP)
    let "j=$i^(1<<(32-$CIDR))"
    local newIP=$(itoa j)

    echo $newIP $newCIDR
}

# configureBridge BRI_NAME [ IF_TO_CONNECT ]
# if IF_TO_CONNECT is defined, it is added to the bridge device and
# the bridge gets its IP/MASK config
setBridge () {
  local bridge="$1"
  local iface="$2"

  brctl addbr "$bridge"

  if [[ $# -eq 2 ]]; then
    local IP=$(ip addr show dev $iface | grep -w "inet" | awk '{print $2}' | cut -f1 -d/)
    local CIDR=$(ip addr show dev $iface | grep "inet $IP" | awk '{print $2}' | cut -f2 -d/)

    newIP=($(getNonConflictingIP $IP $CIDR))
    brctl addif "$bridge" "$iface"

    if ! [[ -z $IP ]]; then
      ip address del "$IP/$CIDR" dev "$iface"
      ip address add "${newIP[0]}/${newIP[1]}" dev "$bridge"
    fi
  fi

  ip link set dev "$bridge" up

}

# Bring up bridge interfaces and configure KVM options for each of them.
configureNetworks () {
  local i=0

  local GATEWAY=$(ip r | grep default | awk '{print $3}')

  for iface in "${local_ifaces[@]}"
  do
    local IP=$(ip address show dev $iface | awk '/inet / { print $2 }' | cut -f1 -d/)
    local CIDR=$(ip address show dev $iface | awk "/inet $IP/ { print \$2 }" | cut -f2 -d/)
    local MAC=$(genMAC)
    local bri_iface="kvmbri$i"

    setBridge "$bri_iface" "$iface"

    # dnsmasq configuration:
    echo dhcp-range=$IP,$IP >> "$DNSMASQ_CONF_DIR"/"$iface".conf
    echo dhcp-host=$MAC,,$IP,infinite >> "$DNSMASQ_CONF_DIR"/"$iface".conf
    echo dhcp-option=option:netmask,$(cidr2mask $CIDR) >> "$DNSMASQ_CONF_DIR"/"$iface".conf
    # kvm configuration:
    echo allow $bri_iface >> $QEMU_CONF_DIR/bridge.conf
    KVM_NET_OPTS="$KVM_NET_OPTS -netdev bridge,br=$bri_iface,id=net$i -device virtio-net-pci,netdev=net$i,mac=$MAC"

    let i++
  done
}

# Debugging mode
if [ "$1" = "bash" ]; then
  exec bash
fi

case $AUTO_ATTACH in
    [Yy]* ) AUTO_ATTACH=1;;
    [Nn]* ) AUTO_ATTACH=0;;
    * ) echo "ERROR: AUTO_ATTACH variable not defined."; exit 1;;
esac

if [[ $AUTO_ATTACH -eq 1 ]]; then
  # Get all interfaces:
  local_ifaces=($(ip link show | grep state | grep -v LOOPBACK | awk '{print $2}' | tr -d : | sed 's/@.*$//'))
  local_bridges=($(brctl show | tail -n +2 | awk '{print $1}'))
  # Get non-bridge interfaces:
  for i in "${local_bridges[@]}"
  do
    local_ifaces=(${local_ifaces[@]//*$i*})
  done
else
  local_ifaces="$ATTACH_IFS"
fi

configureNetworks

dnsmasq

: ${KVM_BLK_OPTS:="\
  -drive file=/image/image.qcow2,if=none,id=drive-ide0-0-0,format=qcow2,cache=writethrough \
  -device ide-hd,bus=ide.0,unit=0,drive=drive-ide0-0-0,id=ide0-0-1,bootindex=1 \
  "}

: ${KVM_OPTS:="\
  -machine rhel6.0.0,accel=kvm,usb=off \
  -nodefaults \
  -no-acpi \
  -device virtio-balloon-pci,id=balloon0,bus=pci.0,addr=0x2 \
  -realtime mlock=off \
  -msg timestamp=on \
  -chardev pty,id=charserial0 \
  -device isa-serial,chardev=charserial0,id=serial0 \
  -serial stdio
  "}
  # -serial telnet::4555,server,nowait \

: ${KVM_CPU_OPTS:="-m 1024 -smp 4,sockets=4,cores=1,threads=1"}

# KVM_ARGS="$@"
echo "Launching $LAUNCHER -enable-kvm $KVM_BLK_OPTS $KVM_OPTS $KVM_CPU_OPTS $KVM_NET_OPTS $KVM_ARGS $@"
exec $LAUNCHER -enable-kvm $KVM_BLK_OPTS $KVM_OPTS $KVM_CPU_OPTS $KVM_NET_OPTS "$@"
